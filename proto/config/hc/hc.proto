// Copyright 2019 Samaritan Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package hc;

import "google/protobuf/duration.proto";

import "gogoproto/gogo.proto";
import "validate/validate.proto";


option (gogoproto.enum_stringer_all) = false;
option (gogoproto.goproto_enum_stringer_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// TCP checker config.
message TCPChecker {}

// ATCP checker config.
message ATCPChecker {
  // Action represents a set of requests from Samaritan to the server
  // and what the expected server returns.
  message Action {
    // This is used to send a data along with a connection opening.
    bytes send = 1;
    // Expecting content returned from the server.
    bytes expect = 2;
  }
  // List of actions.
  // All actions will execute during the health check,
  // if one of the actions fails, this health check will be considered as failed.
  // Need at least one action.
  repeated Action action = 1 [ (validate.rules).repeated .min_items = 1 ];
}

// MySQL checker config.
message MySQLChecker {
  // MySQL server username, not null. 
  string username = 1 [ (validate.rules).string.min_bytes = 1 ];
}

// Redis checker config.
message RedisChecker {
  // Redis server password, if the password is not empty,
  // the AUTH command will be sent before the PING command.
  string password = 1;
}

// Configuration of health check.
message HealthCheck {
  // The interval between two consecutive health checks.
  // Must be greater than 0s.
  google.protobuf.Duration interval = 1 [
    (validate.rules).duration = {gt : {seconds : 0}},
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true
  ];

  // The timeout when doing a health check.
  // Must be greater than 0s.
  google.protobuf.Duration timeout = 2 [
    (validate.rules).duration = {gt : {seconds : 0}},
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true
  ];

  // A server will be considered as dead after # consecutive unsuccessful health checks.
  // Must be greater than 0.
  uint32 fall_threshold = 3 [ (validate.rules).uint32 = {gte : 0} ];

  // A server will be considered as operational after # consecutive successful health checks.
  // Must be greater than 0.
  uint32 rise_threshold = 4 [ (validate.rules).uint32 = {gte : 0} ];

  // Implement of checker, if the checker is null, then TCP checker will be selected.
  oneof checker {
    TCPChecker tcp_checker = 5;
    ATCPChecker atcp_checker = 6;
    MySQLChecker mysql_checker = 7;
    RedisChecker redis_checker = 8;
  }
}
