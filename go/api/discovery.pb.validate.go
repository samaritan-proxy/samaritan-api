// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/discovery.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on SvcDiscoveryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SvcDiscoveryRequest) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetInstance()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SvcDiscoveryRequestValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// SvcDiscoveryRequestValidationError is the validation error returned by
// SvcDiscoveryRequest.Validate if the designated constraints aren't met.
type SvcDiscoveryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SvcDiscoveryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SvcDiscoveryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SvcDiscoveryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SvcDiscoveryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SvcDiscoveryRequestValidationError) ErrorName() string {
	return "SvcDiscoveryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SvcDiscoveryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSvcDiscoveryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SvcDiscoveryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SvcDiscoveryRequestValidationError{}

// Validate checks the field values on SvcDiscoveryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SvcDiscoveryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAdded() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return SvcDiscoveryResponseValidationError{
						field:  fmt.Sprintf("Added[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetRemoved() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return SvcDiscoveryResponseValidationError{
						field:  fmt.Sprintf("Removed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// SvcDiscoveryResponseValidationError is the validation error returned by
// SvcDiscoveryResponse.Validate if the designated constraints aren't met.
type SvcDiscoveryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SvcDiscoveryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SvcDiscoveryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SvcDiscoveryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SvcDiscoveryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SvcDiscoveryResponseValidationError) ErrorName() string {
	return "SvcDiscoveryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SvcDiscoveryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSvcDiscoveryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SvcDiscoveryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SvcDiscoveryResponseValidationError{}

// Validate checks the field values on SvcConfigDiscoveryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SvcConfigDiscoveryRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SvcConfigDiscoveryRequestValidationError is the validation error returned by
// SvcConfigDiscoveryRequest.Validate if the designated constraints aren't met.
type SvcConfigDiscoveryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SvcConfigDiscoveryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SvcConfigDiscoveryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SvcConfigDiscoveryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SvcConfigDiscoveryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SvcConfigDiscoveryRequestValidationError) ErrorName() string {
	return "SvcConfigDiscoveryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SvcConfigDiscoveryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSvcConfigDiscoveryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SvcConfigDiscoveryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SvcConfigDiscoveryRequestValidationError{}

// Validate checks the field values on SvcConfigDiscoveryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SvcConfigDiscoveryResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Updated

	return nil
}

// SvcConfigDiscoveryResponseValidationError is the validation error returned
// by SvcConfigDiscoveryResponse.Validate if the designated constraints aren't met.
type SvcConfigDiscoveryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SvcConfigDiscoveryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SvcConfigDiscoveryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SvcConfigDiscoveryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SvcConfigDiscoveryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SvcConfigDiscoveryResponseValidationError) ErrorName() string {
	return "SvcConfigDiscoveryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SvcConfigDiscoveryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSvcConfigDiscoveryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SvcConfigDiscoveryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SvcConfigDiscoveryResponseValidationError{}

// Validate checks the field values on SvcEndpointDiscoveryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SvcEndpointDiscoveryRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SvcEndpointDiscoveryRequestValidationError is the validation error returned
// by SvcEndpointDiscoveryRequest.Validate if the designated constraints
// aren't met.
type SvcEndpointDiscoveryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SvcEndpointDiscoveryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SvcEndpointDiscoveryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SvcEndpointDiscoveryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SvcEndpointDiscoveryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SvcEndpointDiscoveryRequestValidationError) ErrorName() string {
	return "SvcEndpointDiscoveryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SvcEndpointDiscoveryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSvcEndpointDiscoveryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SvcEndpointDiscoveryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SvcEndpointDiscoveryRequestValidationError{}

// Validate checks the field values on SvcEndpointDiscoveryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SvcEndpointDiscoveryResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SvcName

	for idx, item := range m.GetAdded() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return SvcEndpointDiscoveryResponseValidationError{
						field:  fmt.Sprintf("Added[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetRemoved() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return SvcEndpointDiscoveryResponseValidationError{
						field:  fmt.Sprintf("Removed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// SvcEndpointDiscoveryResponseValidationError is the validation error returned
// by SvcEndpointDiscoveryResponse.Validate if the designated constraints
// aren't met.
type SvcEndpointDiscoveryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SvcEndpointDiscoveryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SvcEndpointDiscoveryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SvcEndpointDiscoveryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SvcEndpointDiscoveryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SvcEndpointDiscoveryResponseValidationError) ErrorName() string {
	return "SvcEndpointDiscoveryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SvcEndpointDiscoveryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSvcEndpointDiscoveryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SvcEndpointDiscoveryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SvcEndpointDiscoveryResponseValidationError{}
