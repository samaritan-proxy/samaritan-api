// Code generated by protoc-gen-jsonify. DO NOT EDIT.
// source: config/bootstrap/bootstrap.proto

package bootstrap
import (
	"bytes"
	"encoding/json"
	"github.com/gogo/protobuf/jsonpb"
)

// BootstrapJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of Bootstrap. This struct is safe to replace or modify but
// should not be done so concurrently.
var BootstrapJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *Bootstrap) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := BootstrapJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*Bootstrap)(nil)
// BootstrapJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of Bootstrap. This struct is safe to replace or modify but
// should not be done so concurrently.
var BootstrapJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *Bootstrap) UnmarshalJSON(b []byte) error {
	return BootstrapJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*Bootstrap)(nil)

// SinkJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of Sink. This struct is safe to replace or modify but
// should not be done so concurrently.
var SinkJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *Sink) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := SinkJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*Sink)(nil)
// SinkJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of Sink. This struct is safe to replace or modify but
// should not be done so concurrently.
var SinkJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *Sink) UnmarshalJSON(b []byte) error {
	return SinkJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*Sink)(nil)

// StatsJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of Stats. This struct is safe to replace or modify but
// should not be done so concurrently.
var StatsJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *Stats) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := StatsJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*Stats)(nil)
// StatsJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of Stats. This struct is safe to replace or modify but
// should not be done so concurrently.
var StatsJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *Stats) UnmarshalJSON(b []byte) error {
	return StatsJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*Stats)(nil)

// LogJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of Log. This struct is safe to replace or modify but
// should not be done so concurrently.
var LogJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *Log) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := LogJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*Log)(nil)
// LogJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of Log. This struct is safe to replace or modify but
// should not be done so concurrently.
var LogJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *Log) UnmarshalJSON(b []byte) error {
	return LogJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*Log)(nil)

// AdminJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of Admin. This struct is safe to replace or modify but
// should not be done so concurrently.
var AdminJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *Admin) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := AdminJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*Admin)(nil)
// AdminJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of Admin. This struct is safe to replace or modify but
// should not be done so concurrently.
var AdminJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *Admin) UnmarshalJSON(b []byte) error {
	return AdminJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*Admin)(nil)

// StaticServiceJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of StaticService. This struct is safe to replace or modify but
// should not be done so concurrently.
var StaticServiceJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *StaticService) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := StaticServiceJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*StaticService)(nil)
// StaticServiceJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of StaticService. This struct is safe to replace or modify but
// should not be done so concurrently.
var StaticServiceJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *StaticService) UnmarshalJSON(b []byte) error {
	return StaticServiceJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*StaticService)(nil)

// ConfigSourceJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of ConfigSource. This struct is safe to replace or modify but
// should not be done so concurrently.
var ConfigSourceJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *ConfigSource) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := ConfigSourceJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*ConfigSource)(nil)
// ConfigSourceJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of ConfigSource. This struct is safe to replace or modify but
// should not be done so concurrently.
var ConfigSourceJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *ConfigSource) UnmarshalJSON(b []byte) error {
	return ConfigSourceJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*ConfigSource)(nil)

// Log_OutputJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of Log_Output. This struct is safe to replace or modify but
// should not be done so concurrently.
var Log_OutputJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *Log_Output) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := Log_OutputJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*Log_Output)(nil)
// Log_OutputJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of Log_Output. This struct is safe to replace or modify but
// should not be done so concurrently.
var Log_OutputJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *Log_Output) UnmarshalJSON(b []byte) error {
	return Log_OutputJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*Log_Output)(nil)

