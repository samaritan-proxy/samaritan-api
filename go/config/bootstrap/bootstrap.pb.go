// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config/bootstrap/bootstrap.proto

package bootstrap

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "github.com/samaritan-proxy/samaritan-api/go/common"
	service "github.com/samaritan-proxy/samaritan-api/go/config/service"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Sink type
type Sink_Type int32

const (
	UNKNOWN Sink_Type = 0
	STATSD  Sink_Type = 1
)

var Sink_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "STATSD",
}

var Sink_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"STATSD":  1,
}

func (x Sink_Type) String() string {
	return proto.EnumName(Sink_Type_name, int32(x))
}

func (Sink_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fa11ded7d5e740b7, []int{1, 0}
}

type Log_Level int32

const (
	// Print base messages during running. This is in addition to warnings and
	// errors.
	INFO Log_Level = 0
	// Print everything, including debugging information.
	DEBUG Log_Level = -1
	// Print all warnings and errors.
	WARING Log_Level = 1
	// Print all errors.
	ERROR Log_Level = 2
	// Print nothing.
	QUIET Log_Level = 3
)

var Log_Level_name = map[int32]string{
	0:  "INFO",
	-1: "DEBUG",
	1:  "WARING",
	2:  "ERROR",
	3:  "QUIET",
}

var Log_Level_value = map[string]int32{
	"INFO":   0,
	"DEBUG":  -1,
	"WARING": 1,
	"ERROR":  2,
	"QUIET":  3,
}

func (x Log_Level) String() string {
	return proto.EnumName(Log_Level_name, int32(x))
}

func (Log_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fa11ded7d5e740b7, []int{3, 0}
}

type Log_Output_Type int32

const (
	STDOUT Log_Output_Type = 0
	SYSLOG Log_Output_Type = 1
)

var Log_Output_Type_name = map[int32]string{
	0: "STDOUT",
	1: "SYSLOG",
}

var Log_Output_Type_value = map[string]int32{
	"STDOUT": 0,
	"SYSLOG": 1,
}

func (x Log_Output_Type) String() string {
	return proto.EnumName(Log_Output_Type_name, int32(x))
}

func (Log_Output_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fa11ded7d5e740b7, []int{3, 0, 0}
}

// This message is supplied via '-config' cli flag and act as the
// root of configuration.
type Bootstrap struct {
	// The instance contains the meta information of the current instance.
	Instance *common.Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Configuration for log.
	Log Log `protobuf:"bytes,2,opt,name=log,proto3" json:"log"`
	// Configuration for stats.
	Stats Stats `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats"`
	// Configuration for the local administration HTTP server.
	Admin *Admin `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin,omitempty"`
	// Statically specified services.
	StaticServices []*StaticService `protobuf:"bytes,5,rep,name=static_services,json=staticServices,proto3" json:"static_services,omitempty"`
	// Configuration for dynamic source config.
	DynamicSourceConfig  *ConfigSource `protobuf:"bytes,6,opt,name=dynamic_source_config,json=dynamicSourceConfig,proto3" json:"dynamic_source_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Bootstrap) Reset()         { *m = Bootstrap{} }
func (m *Bootstrap) String() string { return proto.CompactTextString(m) }
func (*Bootstrap) ProtoMessage()    {}
func (*Bootstrap) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa11ded7d5e740b7, []int{0}
}
func (m *Bootstrap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bootstrap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bootstrap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bootstrap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bootstrap.Merge(m, src)
}
func (m *Bootstrap) XXX_Size() int {
	return m.Size()
}
func (m *Bootstrap) XXX_DiscardUnknown() {
	xxx_messageInfo_Bootstrap.DiscardUnknown(m)
}

var xxx_messageInfo_Bootstrap proto.InternalMessageInfo

func (m *Bootstrap) GetInstance() *common.Instance {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (m *Bootstrap) GetLog() Log {
	if m != nil {
		return m.Log
	}
	return Log{}
}

func (m *Bootstrap) GetStats() Stats {
	if m != nil {
		return m.Stats
	}
	return Stats{}
}

func (m *Bootstrap) GetAdmin() *Admin {
	if m != nil {
		return m.Admin
	}
	return nil
}

func (m *Bootstrap) GetStaticServices() []*StaticService {
	if m != nil {
		return m.StaticServices
	}
	return nil
}

func (m *Bootstrap) GetDynamicSourceConfig() *ConfigSource {
	if m != nil {
		return m.DynamicSourceConfig
	}
	return nil
}

// Sink is a sink for stats. Each Sink is responsible for writing stats
// to a backing store.
type Sink struct {
	Type Sink_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bootstrap.Sink_Type" json:"type,omitempty"`
	// Sink endpoint, not empty.
	Endpoint             string   `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sink) Reset()         { *m = Sink{} }
func (m *Sink) String() string { return proto.CompactTextString(m) }
func (*Sink) ProtoMessage()    {}
func (*Sink) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa11ded7d5e740b7, []int{1}
}
func (m *Sink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sink.Merge(m, src)
}
func (m *Sink) XXX_Size() int {
	return m.Size()
}
func (m *Sink) XXX_DiscardUnknown() {
	xxx_messageInfo_Sink.DiscardUnknown(m)
}

var xxx_messageInfo_Sink proto.InternalMessageInfo

func (m *Sink) GetType() Sink_Type {
	if m != nil {
		return m.Type
	}
	return UNKNOWN
}

func (m *Sink) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

// Stats config.
type Stats struct {
	// Optional set of stats sinks.
	Sinks                []*Sink  `protobuf:"bytes,1,rep,name=sinks,proto3" json:"sinks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa11ded7d5e740b7, []int{2}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return m.Size()
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetSinks() []*Sink {
	if m != nil {
		return m.Sinks
	}
	return nil
}

// Log config.
type Log struct {
	// Logging level
	Level Log_Level `protobuf:"varint,1,opt,name=level,proto3,enum=bootstrap.Log_Level" json:"level,omitempty"`
	// Output target configuration,
	// support send log to stdout or syslog, use stdout as default.
	Output               Log_Output `protobuf:"bytes,2,opt,name=output,proto3" json:"output"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa11ded7d5e740b7, []int{3}
}
func (m *Log) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Log.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return m.Size()
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetLevel() Log_Level {
	if m != nil {
		return m.Level
	}
	return INFO
}

func (m *Log) GetOutput() Log_Output {
	if m != nil {
		return m.Output
	}
	return Log_Output{}
}

type Log_Output struct {
	// Type of output target.
	Type Log_Output_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bootstrap.Log_Output_Type" json:"type,omitempty"`
	// Address of server which is required when `SYSLOG` is selected.
	Target               string   `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log_Output) Reset()         { *m = Log_Output{} }
func (m *Log_Output) String() string { return proto.CompactTextString(m) }
func (*Log_Output) ProtoMessage()    {}
func (*Log_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa11ded7d5e740b7, []int{3, 0}
}
func (m *Log_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Log_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Log_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Log_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log_Output.Merge(m, src)
}
func (m *Log_Output) XXX_Size() int {
	return m.Size()
}
func (m *Log_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Log_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Log_Output proto.InternalMessageInfo

func (m *Log_Output) GetType() Log_Output_Type {
	if m != nil {
		return m.Type
	}
	return STDOUT
}

func (m *Log_Output) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

// The admin message is required to configure the administration server.
type Admin struct {
	// The TCP address that the administration server will listen on, not null.
	Bind                 *common.Address `protobuf:"bytes,1,opt,name=bind,proto3" json:"bind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Admin) Reset()         { *m = Admin{} }
func (m *Admin) String() string { return proto.CompactTextString(m) }
func (*Admin) ProtoMessage()    {}
func (*Admin) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa11ded7d5e740b7, []int{4}
}
func (m *Admin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Admin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Admin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Admin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Admin.Merge(m, src)
}
func (m *Admin) XXX_Size() int {
	return m.Size()
}
func (m *Admin) XXX_DiscardUnknown() {
	xxx_messageInfo_Admin.DiscardUnknown(m)
}

var xxx_messageInfo_Admin proto.InternalMessageInfo

func (m *Admin) GetBind() *common.Address {
	if m != nil {
		return m.Bind
	}
	return nil
}

// The wrapper of service config and endpoints.
type StaticService struct {
	// The name of service.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The proxy strategy of service.
	Config *service.Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// The endpoints of service.
	// Need at least one endpoint.
	Endpoints            []*service.Endpoint `protobuf:"bytes,3,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *StaticService) Reset()         { *m = StaticService{} }
func (m *StaticService) String() string { return proto.CompactTextString(m) }
func (*StaticService) ProtoMessage()    {}
func (*StaticService) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa11ded7d5e740b7, []int{5}
}
func (m *StaticService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaticService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StaticService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StaticService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticService.Merge(m, src)
}
func (m *StaticService) XXX_Size() int {
	return m.Size()
}
func (m *StaticService) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticService.DiscardUnknown(m)
}

var xxx_messageInfo_StaticService proto.InternalMessageInfo

func (m *StaticService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StaticService) GetConfig() *service.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *StaticService) GetEndpoints() []*service.Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

// Configuration for dynamic source config.
type ConfigSource struct {
	// The gRPC endpoint of dynamic source config service, not null.
	Endpoint             string   `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigSource) Reset()         { *m = ConfigSource{} }
func (m *ConfigSource) String() string { return proto.CompactTextString(m) }
func (*ConfigSource) ProtoMessage()    {}
func (*ConfigSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa11ded7d5e740b7, []int{6}
}
func (m *ConfigSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSource.Merge(m, src)
}
func (m *ConfigSource) XXX_Size() int {
	return m.Size()
}
func (m *ConfigSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSource.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSource proto.InternalMessageInfo

func (m *ConfigSource) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func init() {
	proto.RegisterEnum("bootstrap.Sink_Type", Sink_Type_name, Sink_Type_value)
	proto.RegisterEnum("bootstrap.Log_Level", Log_Level_name, Log_Level_value)
	proto.RegisterEnum("bootstrap.Log_Output_Type", Log_Output_Type_name, Log_Output_Type_value)
	proto.RegisterType((*Bootstrap)(nil), "bootstrap.Bootstrap")
	proto.RegisterType((*Sink)(nil), "bootstrap.Sink")
	proto.RegisterType((*Stats)(nil), "bootstrap.Stats")
	proto.RegisterType((*Log)(nil), "bootstrap.Log")
	proto.RegisterType((*Log_Output)(nil), "bootstrap.Log.Output")
	proto.RegisterType((*Admin)(nil), "bootstrap.Admin")
	proto.RegisterType((*StaticService)(nil), "bootstrap.StaticService")
	proto.RegisterType((*ConfigSource)(nil), "bootstrap.ConfigSource")
}

func init() { proto.RegisterFile("config/bootstrap/bootstrap.proto", fileDescriptor_fa11ded7d5e740b7) }

var fileDescriptor_fa11ded7d5e740b7 = []byte{
	// 751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xbf, 0x6f, 0xdb, 0x46,
	0x14, 0xc7, 0x75, 0x14, 0xa9, 0x4a, 0xcf, 0xad, 0xcd, 0x5e, 0xed, 0x9a, 0x50, 0x5b, 0x56, 0x20,
	0xea, 0xd6, 0x28, 0x5c, 0x12, 0x90, 0x5b, 0xc0, 0x40, 0x27, 0xa9, 0x56, 0x0d, 0xc1, 0xaa, 0x84,
	0x9e, 0x24, 0x18, 0xf5, 0x62, 0x50, 0x12, 0xcb, 0x10, 0x96, 0x78, 0x04, 0x49, 0x09, 0xd1, 0x9a,
	0x29, 0xf0, 0x18, 0xe4, 0x3f, 0xc8, 0x92, 0x25, 0xff, 0x40, 0xa6, 0x8c, 0x1e, 0x03, 0x64, 0x0f,
	0x6c, 0x4d, 0xc9, 0xe6, 0xff, 0x20, 0x01, 0xef, 0x8e, 0xfa, 0x15, 0x47, 0x8b, 0xee, 0xde, 0xf7,
	0x73, 0xef, 0xde, 0x7d, 0xef, 0x1d, 0xa1, 0xd4, 0xa7, 0xfe, 0xff, 0x9e, 0x6b, 0xf5, 0x28, 0x8d,
	0xa3, 0x38, 0xb4, 0x83, 0xc5, 0xc8, 0x0c, 0x42, 0x1a, 0x53, 0x5c, 0x98, 0x07, 0x8a, 0xdb, 0x2e,
	0x75, 0x29, 0x8b, 0x5a, 0xc9, 0x88, 0x03, 0xc5, 0xdd, 0x89, 0x3d, 0xf4, 0x06, 0x76, 0xec, 0x58,
	0xe9, 0x40, 0x08, 0xdb, 0x7d, 0x3a, 0x1a, 0x51, 0xdf, 0xb2, 0x07, 0x83, 0xd0, 0x89, 0x22, 0x11,
	0xdd, 0x11, 0x51, 0xcf, 0x8f, 0x62, 0xdb, 0xef, 0xa7, 0xf0, 0x77, 0xa2, 0x90, 0xc8, 0x09, 0x27,
	0x5e, 0xdf, 0xb1, 0xf8, 0x54, 0x88, 0xdf, 0xaf, 0x89, 0xe2, 0x9f, 0xab, 0xc6, 0x1b, 0x09, 0x0a,
	0xd5, 0xb4, 0x48, 0x7c, 0x00, 0xf9, 0x34, 0xb5, 0x86, 0x4a, 0x68, 0x7f, 0xa3, 0xac, 0x9a, 0x7c,
	0x4b, 0xb3, 0x2e, 0xe2, 0x64, 0x4e, 0xe0, 0x9f, 0x21, 0x3b, 0xa4, 0xae, 0x26, 0x31, 0x70, 0xd3,
	0x5c, 0x1c, 0xbe, 0x41, 0xdd, 0xaa, 0x7c, 0xfd, 0xf6, 0xc7, 0x0c, 0x49, 0x00, 0x7c, 0x00, 0x4a,
	0x14, 0xdb, 0x71, 0xa4, 0x65, 0x45, 0xca, 0x05, 0xd9, 0x4e, 0xe2, 0x82, 0xe5, 0x10, 0x2e, 0x83,
	0x62, 0x0f, 0x46, 0x9e, 0xaf, 0xc9, 0x9f, 0xd0, 0x95, 0x24, 0x5e, 0x85, 0x97, 0xef, 0x5f, 0x65,
	0x95, 0x2b, 0x24, 0xa9, 0x88, 0x70, 0x14, 0x57, 0x60, 0x2b, 0x59, 0xec, 0xf5, 0x2f, 0xc4, 0xe9,
	0x22, 0x4d, 0x29, 0x65, 0xf7, 0x37, 0xca, 0xda, 0xda, 0x5e, 0x5e, 0xbf, 0xcd, 0x01, 0xb2, 0x19,
	0x2d, 0x4f, 0x23, 0x7c, 0x0a, 0x3b, 0x83, 0xa9, 0x6f, 0x8f, 0x92, 0x1c, 0x74, 0x1c, 0xf6, 0x9d,
	0x0b, 0xee, 0x9b, 0x96, 0x63, 0x65, 0xec, 0x2e, 0x25, 0xfa, 0x8b, 0x09, 0x6d, 0x46, 0x91, 0x6f,
	0xc4, 0x2a, 0x3e, 0xe5, 0x92, 0x71, 0x85, 0x40, 0x6e, 0x7b, 0xfe, 0x25, 0xfe, 0x1d, 0xe4, 0x78,
	0x1a, 0x70, 0x33, 0x37, 0xcb, 0xdb, 0xcb, 0xd5, 0x78, 0xfe, 0xa5, 0xd9, 0x99, 0x06, 0x8e, 0x38,
	0xcf, 0x23, 0x24, 0x95, 0x32, 0x84, 0xd1, 0x78, 0x0f, 0xf2, 0x8e, 0x3f, 0x08, 0xa8, 0xe7, 0xc7,
	0xcc, 0xdd, 0x42, 0xb5, 0x90, 0x30, 0x72, 0x28, 0x95, 0x10, 0x99, 0x4b, 0xc6, 0x1e, 0xc8, 0x49,
	0x02, 0xbc, 0x01, 0x5f, 0x74, 0x9b, 0xa7, 0xcd, 0xd6, 0x59, 0x53, 0xcd, 0x60, 0x80, 0x5c, 0xbb,
	0x53, 0xe9, 0xb4, 0x8f, 0x55, 0x54, 0x94, 0x1f, 0x3f, 0xd3, 0x33, 0x86, 0x09, 0x0a, 0xb3, 0x19,
	0xef, 0x81, 0x12, 0x79, 0xfe, 0x65, 0xa4, 0x21, 0xe6, 0xcd, 0xd6, 0x5a, 0x35, 0x84, 0xab, 0xc6,
	0x0b, 0x09, 0xb2, 0x0d, 0xea, 0xe2, 0x5f, 0x41, 0x19, 0x3a, 0x13, 0x67, 0x78, 0x4f, 0xf1, 0x0d,
	0xea, 0x9a, 0x8d, 0x44, 0x23, 0x1c, 0xc1, 0x87, 0x90, 0xa3, 0xe3, 0x38, 0x18, 0xc7, 0xa2, 0x1b,
	0x76, 0xd6, 0xe0, 0x16, 0x13, 0xc5, 0x45, 0x0b, 0xb4, 0x38, 0x81, 0x1c, 0x8f, 0x63, 0x73, 0xc5,
	0xa6, 0xe2, 0xbd, 0x8b, 0x99, 0x59, 0xc2, 0xa0, 0x6f, 0x21, 0x17, 0xdb, 0xa1, 0xeb, 0x08, 0x7b,
	0x88, 0x98, 0x19, 0x3f, 0x09, 0x47, 0x98, 0x09, 0xc7, 0xad, 0x6e, 0x47, 0x18, 0xf2, 0x5f, 0xbb,
	0xd1, 0x3a, 0x99, 0x1b, 0xf2, 0x0f, 0x28, 0xac, 0x78, 0x9c, 0x07, 0xb9, 0xde, 0xfc, 0xbb, 0xa5,
	0x66, 0x30, 0x06, 0xe5, 0xb8, 0x56, 0xed, 0x9e, 0xa8, 0x1f, 0xd2, 0x1f, 0x4a, 0x16, 0x9e, 0x55,
	0x48, 0xbd, 0x79, 0xa2, 0x22, 0x5c, 0x00, 0xa5, 0x46, 0x48, 0x8b, 0xa8, 0x52, 0x32, 0xfc, 0xb7,
	0x5b, 0xaf, 0x75, 0xd4, 0xac, 0x48, 0x77, 0x04, 0x0a, 0x6b, 0x4c, 0x6c, 0x81, 0xdc, 0xf3, 0xfc,
	0x81, 0x78, 0x39, 0x5b, 0xe9, 0xcb, 0xa9, 0xf0, 0x27, 0xbc, 0xd2, 0xb7, 0x0c, 0x34, 0x9e, 0x22,
	0xf8, 0x6a, 0xa5, 0x2b, 0xf1, 0x0f, 0x20, 0xfb, 0xf6, 0x88, 0x1b, 0xb1, 0x72, 0xeb, 0x2c, 0x8c,
	0x7f, 0x81, 0x9c, 0xe8, 0x4a, 0x49, 0xec, 0x91, 0xbe, 0x66, 0xde, 0x78, 0x44, 0xc8, 0xf8, 0x4f,
	0x28, 0xa4, 0x6d, 0x92, 0x3c, 0xbb, 0xe4, 0xba, 0xbf, 0x9e, 0xb3, 0x35, 0xa1, 0x88, 0x8a, 0x9e,
	0x20, 0x29, 0x8f, 0xc8, 0x82, 0x37, 0xfe, 0x80, 0x2f, 0x97, 0x5b, 0x7c, 0xa5, 0x1d, 0xd1, 0x67,
	0xdb, 0xb1, 0x7a, 0x7e, 0x73, 0xab, 0xa3, 0xbb, 0x5b, 0x1d, 0x3d, 0x9f, 0xe9, 0xe8, 0x7a, 0xa6,
	0xa3, 0xd7, 0x33, 0x1d, 0xdd, 0xcc, 0x74, 0xf4, 0x6e, 0xa6, 0xa3, 0xbb, 0x99, 0x9e, 0x39, 0x3f,
	0x72, 0xbd, 0xf8, 0xc1, 0xb8, 0x97, 0x18, 0x63, 0x45, 0xf6, 0xc8, 0x0e, 0xbd, 0xd8, 0xf6, 0x7f,
	0x0b, 0x42, 0xfa, 0x70, 0xba, 0x98, 0x5b, 0x41, 0xcf, 0x5a, 0xff, 0xb0, 0xf6, 0x72, 0xec, 0x6b,
	0x75, 0xf8, 0x31, 0x00, 0x00, 0xff, 0xff, 0x14, 0x4d, 0x2d, 0x9e, 0x73, 0x05, 0x00, 0x00,
}

func (this *Bootstrap) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Bootstrap)
	if !ok {
		that2, ok := that.(Bootstrap)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Bootstrap")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Bootstrap but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Bootstrap but is not nil && this == nil")
	}
	if !this.Instance.Equal(that1.Instance) {
		return fmt.Errorf("Instance this(%v) Not Equal that(%v)", this.Instance, that1.Instance)
	}
	if !this.Log.Equal(&that1.Log) {
		return fmt.Errorf("Log this(%v) Not Equal that(%v)", this.Log, that1.Log)
	}
	if !this.Stats.Equal(&that1.Stats) {
		return fmt.Errorf("Stats this(%v) Not Equal that(%v)", this.Stats, that1.Stats)
	}
	if !this.Admin.Equal(that1.Admin) {
		return fmt.Errorf("Admin this(%v) Not Equal that(%v)", this.Admin, that1.Admin)
	}
	if len(this.StaticServices) != len(that1.StaticServices) {
		return fmt.Errorf("StaticServices this(%v) Not Equal that(%v)", len(this.StaticServices), len(that1.StaticServices))
	}
	for i := range this.StaticServices {
		if !this.StaticServices[i].Equal(that1.StaticServices[i]) {
			return fmt.Errorf("StaticServices this[%v](%v) Not Equal that[%v](%v)", i, this.StaticServices[i], i, that1.StaticServices[i])
		}
	}
	if !this.DynamicSourceConfig.Equal(that1.DynamicSourceConfig) {
		return fmt.Errorf("DynamicSourceConfig this(%v) Not Equal that(%v)", this.DynamicSourceConfig, that1.DynamicSourceConfig)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Bootstrap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bootstrap)
	if !ok {
		that2, ok := that.(Bootstrap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Instance.Equal(that1.Instance) {
		return false
	}
	if !this.Log.Equal(&that1.Log) {
		return false
	}
	if !this.Stats.Equal(&that1.Stats) {
		return false
	}
	if !this.Admin.Equal(that1.Admin) {
		return false
	}
	if len(this.StaticServices) != len(that1.StaticServices) {
		return false
	}
	for i := range this.StaticServices {
		if !this.StaticServices[i].Equal(that1.StaticServices[i]) {
			return false
		}
	}
	if !this.DynamicSourceConfig.Equal(that1.DynamicSourceConfig) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Sink) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Sink)
	if !ok {
		that2, ok := that.(Sink)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Sink")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Sink but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Sink but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Endpoint != that1.Endpoint {
		return fmt.Errorf("Endpoint this(%v) Not Equal that(%v)", this.Endpoint, that1.Endpoint)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Sink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Sink)
	if !ok {
		that2, ok := that.(Sink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Stats) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Stats)
	if !ok {
		that2, ok := that.(Stats)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Stats")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Stats but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Stats but is not nil && this == nil")
	}
	if len(this.Sinks) != len(that1.Sinks) {
		return fmt.Errorf("Sinks this(%v) Not Equal that(%v)", len(this.Sinks), len(that1.Sinks))
	}
	for i := range this.Sinks {
		if !this.Sinks[i].Equal(that1.Sinks[i]) {
			return fmt.Errorf("Sinks this[%v](%v) Not Equal that[%v](%v)", i, this.Sinks[i], i, that1.Sinks[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Stats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats)
	if !ok {
		that2, ok := that.(Stats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sinks) != len(that1.Sinks) {
		return false
	}
	for i := range this.Sinks {
		if !this.Sinks[i].Equal(that1.Sinks[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Log) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Log)
	if !ok {
		that2, ok := that.(Log)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Log")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Log but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Log but is not nil && this == nil")
	}
	if this.Level != that1.Level {
		return fmt.Errorf("Level this(%v) Not Equal that(%v)", this.Level, that1.Level)
	}
	if !this.Output.Equal(&that1.Output) {
		return fmt.Errorf("Output this(%v) Not Equal that(%v)", this.Output, that1.Output)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Log) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Log)
	if !ok {
		that2, ok := that.(Log)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if !this.Output.Equal(&that1.Output) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Log_Output) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Log_Output)
	if !ok {
		that2, ok := that.(Log_Output)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Log_Output")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Log_Output but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Log_Output but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Target != that1.Target {
		return fmt.Errorf("Target this(%v) Not Equal that(%v)", this.Target, that1.Target)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Log_Output) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Log_Output)
	if !ok {
		that2, ok := that.(Log_Output)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Admin) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Admin)
	if !ok {
		that2, ok := that.(Admin)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Admin")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Admin but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Admin but is not nil && this == nil")
	}
	if !this.Bind.Equal(that1.Bind) {
		return fmt.Errorf("Bind this(%v) Not Equal that(%v)", this.Bind, that1.Bind)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Admin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Admin)
	if !ok {
		that2, ok := that.(Admin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bind.Equal(that1.Bind) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StaticService) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StaticService)
	if !ok {
		that2, ok := that.(StaticService)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StaticService")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StaticService but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StaticService but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if !this.Config.Equal(that1.Config) {
		return fmt.Errorf("Config this(%v) Not Equal that(%v)", this.Config, that1.Config)
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return fmt.Errorf("Endpoints this(%v) Not Equal that(%v)", len(this.Endpoints), len(that1.Endpoints))
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return fmt.Errorf("Endpoints this[%v](%v) Not Equal that[%v](%v)", i, this.Endpoints[i], i, that1.Endpoints[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *StaticService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticService)
	if !ok {
		that2, ok := that.(StaticService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return false
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConfigSource) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConfigSource)
	if !ok {
		that2, ok := that.(ConfigSource)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConfigSource")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConfigSource but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConfigSource but is not nil && this == nil")
	}
	if this.Endpoint != that1.Endpoint {
		return fmt.Errorf("Endpoint this(%v) Not Equal that(%v)", this.Endpoint, that1.Endpoint)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ConfigSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigSource)
	if !ok {
		that2, ok := that.(ConfigSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Bootstrap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&bootstrap.Bootstrap{")
	if this.Instance != nil {
		s = append(s, "Instance: "+fmt.Sprintf("%#v", this.Instance)+",\n")
	}
	s = append(s, "Log: "+strings.Replace(this.Log.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Stats: "+strings.Replace(this.Stats.GoString(), `&`, ``, 1)+",\n")
	if this.Admin != nil {
		s = append(s, "Admin: "+fmt.Sprintf("%#v", this.Admin)+",\n")
	}
	if this.StaticServices != nil {
		s = append(s, "StaticServices: "+fmt.Sprintf("%#v", this.StaticServices)+",\n")
	}
	if this.DynamicSourceConfig != nil {
		s = append(s, "DynamicSourceConfig: "+fmt.Sprintf("%#v", this.DynamicSourceConfig)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Sink) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bootstrap.Sink{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Stats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bootstrap.Stats{")
	if this.Sinks != nil {
		s = append(s, "Sinks: "+fmt.Sprintf("%#v", this.Sinks)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Log) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bootstrap.Log{")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Output: "+strings.Replace(this.Output.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Log_Output) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bootstrap.Log_Output{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Admin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bootstrap.Admin{")
	if this.Bind != nil {
		s = append(s, "Bind: "+fmt.Sprintf("%#v", this.Bind)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StaticService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&bootstrap.StaticService{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.Endpoints != nil {
		s = append(s, "Endpoints: "+fmt.Sprintf("%#v", this.Endpoints)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigSource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bootstrap.ConfigSource{")
	s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBootstrap(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Bootstrap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bootstrap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bootstrap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DynamicSourceConfig != nil {
		{
			size, err := m.DynamicSourceConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBootstrap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.StaticServices) > 0 {
		for iNdEx := len(m.StaticServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StaticServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBootstrap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Admin != nil {
		{
			size, err := m.Admin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBootstrap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Log.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Instance != nil {
		{
			size, err := m.Instance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBootstrap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sinks) > 0 {
		for iNdEx := len(m.Sinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBootstrap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Log) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Level != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Log_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Log_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Admin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Admin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Admin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Bind != nil {
		{
			size, err := m.Bind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBootstrap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StaticService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaticService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaticService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Endpoints) > 0 {
		for iNdEx := len(m.Endpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Endpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBootstrap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBootstrap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBootstrap(dAtA []byte, offset int, v uint64) int {
	offset -= sovBootstrap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bootstrap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Instance != nil {
		l = m.Instance.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = m.Log.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	l = m.Stats.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	if m.Admin != nil {
		l = m.Admin.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if len(m.StaticServices) > 0 {
		for _, e := range m.StaticServices {
			l = e.Size()
			n += 1 + l + sovBootstrap(uint64(l))
		}
	}
	if m.DynamicSourceConfig != nil {
		l = m.DynamicSourceConfig.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Sink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBootstrap(uint64(m.Type))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Stats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sinks) > 0 {
		for _, e := range m.Sinks {
			l = e.Size()
			n += 1 + l + sovBootstrap(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Log) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovBootstrap(uint64(m.Level))
	}
	l = m.Output.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Log_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBootstrap(uint64(m.Type))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Admin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bind != nil {
		l = m.Bind.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StaticService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovBootstrap(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBootstrap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBootstrap(x uint64) (n int) {
	return sovBootstrap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bootstrap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bootstrap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bootstrap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instance == nil {
				m.Instance = &common.Instance{}
			}
			if err := m.Instance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Admin == nil {
				m.Admin = &Admin{}
			}
			if err := m.Admin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticServices = append(m.StaticServices, &StaticService{})
			if err := m.StaticServices[len(m.StaticServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicSourceConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicSourceConfig == nil {
				m.DynamicSourceConfig = &ConfigSource{}
			}
			if err := m.DynamicSourceConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Sink_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sinks = append(m.Sinks, &Sink{})
			if err := m.Sinks[len(m.Sinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Log_Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Log_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Log_Output_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Admin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Admin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Admin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bind == nil {
				m.Bind = &common.Address{}
			}
			if err := m.Bind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaticService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaticService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaticService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &service.Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &service.Endpoint{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBootstrap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBootstrap
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBootstrap
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBootstrap
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBootstrap(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBootstrap
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBootstrap = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBootstrap   = fmt.Errorf("proto: integer overflow")
)
