// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config/hc/hc.proto

package hc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on TCPChecker with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TCPChecker) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// TCPCheckerValidationError is the validation error returned by
// TCPChecker.Validate if the designated constraints aren't met.
type TCPCheckerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TCPCheckerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TCPCheckerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TCPCheckerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TCPCheckerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TCPCheckerValidationError) ErrorName() string { return "TCPCheckerValidationError" }

// Error satisfies the builtin error interface
func (e TCPCheckerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTCPChecker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TCPCheckerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TCPCheckerValidationError{}

// Validate checks the field values on ATCPChecker with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ATCPChecker) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetAction()) < 1 {
		return ATCPCheckerValidationError{
			field:  "Action",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetAction() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ATCPCheckerValidationError{
						field:  fmt.Sprintf("Action[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ATCPCheckerValidationError is the validation error returned by
// ATCPChecker.Validate if the designated constraints aren't met.
type ATCPCheckerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ATCPCheckerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ATCPCheckerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ATCPCheckerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ATCPCheckerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ATCPCheckerValidationError) ErrorName() string { return "ATCPCheckerValidationError" }

// Error satisfies the builtin error interface
func (e ATCPCheckerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sATCPChecker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ATCPCheckerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ATCPCheckerValidationError{}

// Validate checks the field values on MySQLChecker with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MySQLChecker) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetUsername()) < 1 {
		return MySQLCheckerValidationError{
			field:  "Username",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// MySQLCheckerValidationError is the validation error returned by
// MySQLChecker.Validate if the designated constraints aren't met.
type MySQLCheckerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MySQLCheckerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MySQLCheckerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MySQLCheckerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MySQLCheckerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MySQLCheckerValidationError) ErrorName() string { return "MySQLCheckerValidationError" }

// Error satisfies the builtin error interface
func (e MySQLCheckerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMySQLChecker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MySQLCheckerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MySQLCheckerValidationError{}

// Validate checks the field values on RedisChecker with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RedisChecker) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Password

	return nil
}

// RedisCheckerValidationError is the validation error returned by
// RedisChecker.Validate if the designated constraints aren't met.
type RedisCheckerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedisCheckerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedisCheckerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedisCheckerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedisCheckerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedisCheckerValidationError) ErrorName() string { return "RedisCheckerValidationError" }

// Error satisfies the builtin error interface
func (e RedisCheckerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedisChecker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedisCheckerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedisCheckerValidationError{}

// Validate checks the field values on HealthCheck with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HealthCheck) Validate() error {
	if m == nil {
		return nil
	}

	if true {
		dur := m.GetInterval()

		gt := time.Duration(0*time.Second + 0*time.Nanosecond)

		if dur <= gt {
			return HealthCheckValidationError{
				field:  "Interval",
				reason: "value must be greater than 0s",
			}
		}

	}

	if true {
		dur := m.GetTimeout()

		gt := time.Duration(0*time.Second + 0*time.Nanosecond)

		if dur <= gt {
			return HealthCheckValidationError{
				field:  "Timeout",
				reason: "value must be greater than 0s",
			}
		}

	}

	if m.GetFallThreshold() < 0 {
		return HealthCheckValidationError{
			field:  "FallThreshold",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetRiseThreshold() < 0 {
		return HealthCheckValidationError{
			field:  "RiseThreshold",
			reason: "value must be greater than or equal to 0",
		}
	}

	switch m.Checker.(type) {

	case *HealthCheck_TcpChecker:

		{
			tmp := m.GetTcpChecker()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HealthCheckValidationError{
						field:  "TcpChecker",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *HealthCheck_AtcpChecker:

		{
			tmp := m.GetAtcpChecker()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HealthCheckValidationError{
						field:  "AtcpChecker",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *HealthCheck_MysqlChecker:

		{
			tmp := m.GetMysqlChecker()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HealthCheckValidationError{
						field:  "MysqlChecker",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *HealthCheck_RedisChecker:

		{
			tmp := m.GetRedisChecker()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HealthCheckValidationError{
						field:  "RedisChecker",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// HealthCheckValidationError is the validation error returned by
// HealthCheck.Validate if the designated constraints aren't met.
type HealthCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckValidationError) ErrorName() string { return "HealthCheckValidationError" }

// Error satisfies the builtin error interface
func (e HealthCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckValidationError{}

// Validate checks the field values on ATCPChecker_Action with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ATCPChecker_Action) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Send

	// no validation rules for Expect

	return nil
}

// ATCPChecker_ActionValidationError is the validation error returned by
// ATCPChecker_Action.Validate if the designated constraints aren't met.
type ATCPChecker_ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ATCPChecker_ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ATCPChecker_ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ATCPChecker_ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ATCPChecker_ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ATCPChecker_ActionValidationError) ErrorName() string {
	return "ATCPChecker_ActionValidationError"
}

// Error satisfies the builtin error interface
func (e ATCPChecker_ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sATCPChecker_Action.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ATCPChecker_ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ATCPChecker_ActionValidationError{}
