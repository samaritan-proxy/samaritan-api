// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config/hc/hc.proto

package hc

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TCP checker config.
type TCPChecker struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TCPChecker) Reset()         { *m = TCPChecker{} }
func (m *TCPChecker) String() string { return proto.CompactTextString(m) }
func (*TCPChecker) ProtoMessage()    {}
func (*TCPChecker) Descriptor() ([]byte, []int) {
	return fileDescriptor_70fa03746bed9178, []int{0}
}
func (m *TCPChecker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TCPChecker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TCPChecker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TCPChecker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPChecker.Merge(m, src)
}
func (m *TCPChecker) XXX_Size() int {
	return m.Size()
}
func (m *TCPChecker) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPChecker.DiscardUnknown(m)
}

var xxx_messageInfo_TCPChecker proto.InternalMessageInfo

// ATCP checker config.
type ATCPChecker struct {
	// List of actions.
	// All actions will execute during the health check,
	// if one of the actions fails, this health check will be considered as failed.
	// Need at least one action.
	Action               []*ATCPChecker_Action `protobuf:"bytes,1,rep,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ATCPChecker) Reset()         { *m = ATCPChecker{} }
func (m *ATCPChecker) String() string { return proto.CompactTextString(m) }
func (*ATCPChecker) ProtoMessage()    {}
func (*ATCPChecker) Descriptor() ([]byte, []int) {
	return fileDescriptor_70fa03746bed9178, []int{1}
}
func (m *ATCPChecker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ATCPChecker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ATCPChecker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ATCPChecker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ATCPChecker.Merge(m, src)
}
func (m *ATCPChecker) XXX_Size() int {
	return m.Size()
}
func (m *ATCPChecker) XXX_DiscardUnknown() {
	xxx_messageInfo_ATCPChecker.DiscardUnknown(m)
}

var xxx_messageInfo_ATCPChecker proto.InternalMessageInfo

func (m *ATCPChecker) GetAction() []*ATCPChecker_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

// Action represents a set of requests from Samaritan to the server
// and what the expected server returns.
type ATCPChecker_Action struct {
	// This is used to send a data along with a connection opening.
	Send []byte `protobuf:"bytes,1,opt,name=send,proto3" json:"send,omitempty"`
	// Expecting content returned from the server.
	Expect               []byte   `protobuf:"bytes,2,opt,name=expect,proto3" json:"expect,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ATCPChecker_Action) Reset()         { *m = ATCPChecker_Action{} }
func (m *ATCPChecker_Action) String() string { return proto.CompactTextString(m) }
func (*ATCPChecker_Action) ProtoMessage()    {}
func (*ATCPChecker_Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_70fa03746bed9178, []int{1, 0}
}
func (m *ATCPChecker_Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ATCPChecker_Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ATCPChecker_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ATCPChecker_Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ATCPChecker_Action.Merge(m, src)
}
func (m *ATCPChecker_Action) XXX_Size() int {
	return m.Size()
}
func (m *ATCPChecker_Action) XXX_DiscardUnknown() {
	xxx_messageInfo_ATCPChecker_Action.DiscardUnknown(m)
}

var xxx_messageInfo_ATCPChecker_Action proto.InternalMessageInfo

func (m *ATCPChecker_Action) GetSend() []byte {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *ATCPChecker_Action) GetExpect() []byte {
	if m != nil {
		return m.Expect
	}
	return nil
}

// MySQL checker config.
type MySQLChecker struct {
	// MySQL server username, not null.
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MySQLChecker) Reset()         { *m = MySQLChecker{} }
func (m *MySQLChecker) String() string { return proto.CompactTextString(m) }
func (*MySQLChecker) ProtoMessage()    {}
func (*MySQLChecker) Descriptor() ([]byte, []int) {
	return fileDescriptor_70fa03746bed9178, []int{2}
}
func (m *MySQLChecker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLChecker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MySQLChecker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MySQLChecker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLChecker.Merge(m, src)
}
func (m *MySQLChecker) XXX_Size() int {
	return m.Size()
}
func (m *MySQLChecker) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLChecker.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLChecker proto.InternalMessageInfo

func (m *MySQLChecker) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Redis checker config.
type RedisChecker struct {
	// Redis server password, if the password is not empty,
	// the AUTH command will be sent before the PING command.
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisChecker) Reset()         { *m = RedisChecker{} }
func (m *RedisChecker) String() string { return proto.CompactTextString(m) }
func (*RedisChecker) ProtoMessage()    {}
func (*RedisChecker) Descriptor() ([]byte, []int) {
	return fileDescriptor_70fa03746bed9178, []int{3}
}
func (m *RedisChecker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisChecker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisChecker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisChecker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisChecker.Merge(m, src)
}
func (m *RedisChecker) XXX_Size() int {
	return m.Size()
}
func (m *RedisChecker) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisChecker.DiscardUnknown(m)
}

var xxx_messageInfo_RedisChecker proto.InternalMessageInfo

func (m *RedisChecker) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Configuration of health check.
type HealthCheck struct {
	// The interval between two consecutive health checks.
	// Must be greater than 0s.
	Interval time.Duration `protobuf:"bytes,1,opt,name=interval,proto3,stdduration" json:"interval"`
	// The timeout when doing a health check.
	// Must be greater than 0s.
	Timeout time.Duration `protobuf:"bytes,2,opt,name=timeout,proto3,stdduration" json:"timeout"`
	// A server will be considered as dead after # consecutive unsuccessful health checks.
	// Must be greater than 0.
	FallThreshold uint32 `protobuf:"varint,3,opt,name=fall_threshold,json=fallThreshold,proto3" json:"fall_threshold,omitempty"`
	// A server will be considered as operational after # consecutive successful health checks.
	// Must be greater than 0.
	RiseThreshold uint32 `protobuf:"varint,4,opt,name=rise_threshold,json=riseThreshold,proto3" json:"rise_threshold,omitempty"`
	// Implement of checker, if the checker is null, then TCP checker will be selected.
	//
	// Types that are valid to be assigned to Checker:
	//	*HealthCheck_TcpChecker
	//	*HealthCheck_AtcpChecker
	//	*HealthCheck_MysqlChecker
	//	*HealthCheck_RedisChecker
	Checker              isHealthCheck_Checker `protobuf_oneof:"checker"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_70fa03746bed9178, []int{4}
}
func (m *HealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck.Merge(m, src)
}
func (m *HealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck proto.InternalMessageInfo

type isHealthCheck_Checker interface {
	isHealthCheck_Checker()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type HealthCheck_TcpChecker struct {
	TcpChecker *TCPChecker `protobuf:"bytes,5,opt,name=tcp_checker,json=tcpChecker,proto3,oneof"`
}
type HealthCheck_AtcpChecker struct {
	AtcpChecker *ATCPChecker `protobuf:"bytes,6,opt,name=atcp_checker,json=atcpChecker,proto3,oneof"`
}
type HealthCheck_MysqlChecker struct {
	MysqlChecker *MySQLChecker `protobuf:"bytes,7,opt,name=mysql_checker,json=mysqlChecker,proto3,oneof"`
}
type HealthCheck_RedisChecker struct {
	RedisChecker *RedisChecker `protobuf:"bytes,8,opt,name=redis_checker,json=redisChecker,proto3,oneof"`
}

func (*HealthCheck_TcpChecker) isHealthCheck_Checker()   {}
func (*HealthCheck_AtcpChecker) isHealthCheck_Checker()  {}
func (*HealthCheck_MysqlChecker) isHealthCheck_Checker() {}
func (*HealthCheck_RedisChecker) isHealthCheck_Checker() {}

func (m *HealthCheck) GetChecker() isHealthCheck_Checker {
	if m != nil {
		return m.Checker
	}
	return nil
}

func (m *HealthCheck) GetInterval() time.Duration {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *HealthCheck) GetTimeout() time.Duration {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *HealthCheck) GetFallThreshold() uint32 {
	if m != nil {
		return m.FallThreshold
	}
	return 0
}

func (m *HealthCheck) GetRiseThreshold() uint32 {
	if m != nil {
		return m.RiseThreshold
	}
	return 0
}

func (m *HealthCheck) GetTcpChecker() *TCPChecker {
	if x, ok := m.GetChecker().(*HealthCheck_TcpChecker); ok {
		return x.TcpChecker
	}
	return nil
}

func (m *HealthCheck) GetAtcpChecker() *ATCPChecker {
	if x, ok := m.GetChecker().(*HealthCheck_AtcpChecker); ok {
		return x.AtcpChecker
	}
	return nil
}

func (m *HealthCheck) GetMysqlChecker() *MySQLChecker {
	if x, ok := m.GetChecker().(*HealthCheck_MysqlChecker); ok {
		return x.MysqlChecker
	}
	return nil
}

func (m *HealthCheck) GetRedisChecker() *RedisChecker {
	if x, ok := m.GetChecker().(*HealthCheck_RedisChecker); ok {
		return x.RedisChecker
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HealthCheck) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HealthCheck_TcpChecker)(nil),
		(*HealthCheck_AtcpChecker)(nil),
		(*HealthCheck_MysqlChecker)(nil),
		(*HealthCheck_RedisChecker)(nil),
	}
}

func init() {
	proto.RegisterType((*TCPChecker)(nil), "hc.TCPChecker")
	proto.RegisterType((*ATCPChecker)(nil), "hc.ATCPChecker")
	proto.RegisterType((*ATCPChecker_Action)(nil), "hc.ATCPChecker.Action")
	proto.RegisterType((*MySQLChecker)(nil), "hc.MySQLChecker")
	proto.RegisterType((*RedisChecker)(nil), "hc.RedisChecker")
	proto.RegisterType((*HealthCheck)(nil), "hc.HealthCheck")
}

func init() { proto.RegisterFile("config/hc/hc.proto", fileDescriptor_70fa03746bed9178) }

var fileDescriptor_70fa03746bed9178 = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x3d, 0x4e, 0x9a, 0xcb, 0xb1, 0x53, 0x90, 0x85, 0x4a, 0xc8, 0xc2, 0x8d, 0x22, 0x21,
	0x45, 0x91, 0xb0, 0x69, 0x29, 0x42, 0x62, 0xd7, 0x14, 0x89, 0x20, 0x81, 0x04, 0x6e, 0x57, 0x6c,
	0xaa, 0xc9, 0x64, 0x62, 0x5b, 0x38, 0x1e, 0x33, 0x9e, 0x94, 0x66, 0xc5, 0x3b, 0xb0, 0xe2, 0x11,
	0x10, 0x8f, 0xc0, 0x8a, 0x65, 0x97, 0x3c, 0x01, 0xb4, 0x5e, 0x81, 0xd8, 0xf4, 0x11, 0x90, 0xc7,
	0x57, 0xc1, 0x8a, 0xdd, 0xb9, 0xfc, 0xdf, 0xcc, 0x9c, 0xf3, 0xdb, 0x60, 0x10, 0x16, 0x2e, 0x7d,
	0xd7, 0xf6, 0x88, 0xed, 0x11, 0x2b, 0xe2, 0x4c, 0x30, 0x43, 0xf5, 0xc8, 0xc0, 0x74, 0x19, 0x73,
	0x03, 0x6a, 0xcb, 0xca, 0x7c, 0xbd, 0xb4, 0x17, 0x6b, 0x8e, 0x85, 0xcf, 0xc2, 0x4c, 0x33, 0xb8,
	0xe5, 0x32, 0x97, 0xc9, 0xd0, 0x4e, 0xa3, 0xbc, 0x7a, 0xfb, 0x0c, 0x07, 0xfe, 0x02, 0x0b, 0x6a,
	0x17, 0x41, 0xd6, 0x18, 0xe9, 0x00, 0x27, 0x47, 0x2f, 0x8f, 0x3c, 0x4a, 0xde, 0x50, 0x3e, 0x7a,
	0x0f, 0xda, 0x61, 0x95, 0x1a, 0x8f, 0xa1, 0x85, 0x49, 0x7a, 0x76, 0x1f, 0x0d, 0x1b, 0x63, 0x6d,
	0x7f, 0xc7, 0xf2, 0x88, 0x55, 0x13, 0x58, 0x87, 0xb2, 0x3b, 0x85, 0x2f, 0xbf, 0xbe, 0x36, 0xb6,
	0x3e, 0x20, 0xb5, 0x83, 0x9c, 0x9c, 0x18, 0x1c, 0x40, 0x2b, 0xeb, 0x1a, 0x06, 0x34, 0x63, 0x1a,
	0x2e, 0xfa, 0x68, 0x88, 0xc6, 0xba, 0x23, 0x63, 0x63, 0x07, 0x5a, 0xf4, 0x3c, 0xa2, 0x44, 0xf4,
	0x55, 0x59, 0xcd, 0xb3, 0xd1, 0x43, 0xd0, 0x5f, 0x6c, 0x8e, 0x5f, 0x3d, 0x2f, 0x5e, 0x70, 0x17,
	0x3a, 0xeb, 0x98, 0xf2, 0x10, 0xaf, 0xa8, 0xe4, 0xbb, 0xd3, 0x6e, 0x7a, 0x57, 0x93, 0xab, 0x43,
	0xe4, 0x94, 0xad, 0xd1, 0x04, 0x74, 0x87, 0x2e, 0xfc, 0xb8, 0xc0, 0x06, 0xd0, 0x89, 0x70, 0x1c,
	0xbf, 0x63, 0x3c, 0xbb, 0xb6, 0xeb, 0x94, 0xf9, 0xe8, 0x77, 0x03, 0xb4, 0x19, 0xc5, 0x81, 0xf0,
	0xa4, 0xda, 0x78, 0x06, 0x1d, 0x3f, 0x14, 0x94, 0x9f, 0xe1, 0x40, 0x6a, 0xb5, 0xfd, 0x3b, 0x56,
	0xb6, 0x63, 0xab, 0xd8, 0xb1, 0xf5, 0x24, 0xdf, 0xf1, 0xd4, 0xb8, 0xf8, 0xbe, 0xab, 0x7c, 0xfc,
	0xb1, 0x8b, 0xe4, 0xc4, 0x9f, 0x91, 0x3a, 0x51, 0x9c, 0x12, 0x37, 0x9e, 0x42, 0x5b, 0xf8, 0x2b,
	0xca, 0xd6, 0xd9, 0x58, 0xff, 0x7d, 0x52, 0x41, 0x1b, 0xf7, 0x61, 0x7b, 0x89, 0x83, 0xe0, 0x54,
	0x78, 0x9c, 0xc6, 0x1e, 0x0b, 0x16, 0xfd, 0xc6, 0x10, 0x8d, 0x7b, 0xf9, 0xf0, 0x13, 0x75, 0xac,
	0x38, 0xbd, 0x54, 0x70, 0x52, 0xf4, 0x53, 0x82, 0xfb, 0x31, 0xad, 0x11, 0xcd, 0x7f, 0x88, 0x54,
	0x50, 0x11, 0x7b, 0xa0, 0x09, 0x12, 0x9d, 0x92, 0x6c, 0x65, 0xfd, 0x2d, 0xf9, 0xe0, 0xed, 0xd4,
	0xe1, 0xca, 0xe0, 0x99, 0xe2, 0x80, 0x20, 0x51, 0xb1, 0xd6, 0x03, 0xd0, 0x71, 0x9d, 0x69, 0x49,
	0xe6, 0xc6, 0x5f, 0x5f, 0xc5, 0x4c, 0x71, 0x34, 0x5c, 0xa3, 0x1e, 0x41, 0x6f, 0xb5, 0x89, 0xdf,
	0x06, 0x25, 0xd6, 0x96, 0xd8, 0xcd, 0x14, 0xab, 0x9b, 0x3d, 0x53, 0x1c, 0x5d, 0x0a, 0x6b, 0x20,
	0x4f, 0x5d, 0x2d, 0xc1, 0x4e, 0x05, 0xd6, 0xed, 0x4e, 0x41, 0x5e, 0xcb, 0xa7, 0x5d, 0x68, 0xe7,
	0xc8, 0xf4, 0xf8, 0xf2, 0xca, 0x44, 0xd7, 0x57, 0x26, 0xfa, 0x94, 0x98, 0xe8, 0x22, 0x31, 0xd1,
	0xb7, 0xc4, 0x44, 0x97, 0x89, 0x89, 0x7e, 0x26, 0x26, 0xba, 0x4e, 0x4c, 0xe5, 0xf5, 0x9e, 0xeb,
	0x0b, 0x6f, 0x3d, 0xb7, 0x08, 0x5b, 0xd9, 0x31, 0x5e, 0x61, 0xee, 0x0b, 0x1c, 0xde, 0x8b, 0x38,
	0x3b, 0xdf, 0x54, 0xb9, 0x1d, 0xcd, 0xed, 0xf2, 0x87, 0x9c, 0xb7, 0xa4, 0x9d, 0x0f, 0xfe, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x32, 0x9e, 0xe4, 0x8b, 0xa4, 0x03, 0x00, 0x00,
}

func (this *TCPChecker) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TCPChecker)
	if !ok {
		that2, ok := that.(TCPChecker)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TCPChecker")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TCPChecker but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TCPChecker but is not nil && this == nil")
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *TCPChecker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPChecker)
	if !ok {
		that2, ok := that.(TCPChecker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ATCPChecker) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ATCPChecker)
	if !ok {
		that2, ok := that.(ATCPChecker)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ATCPChecker")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ATCPChecker but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ATCPChecker but is not nil && this == nil")
	}
	if len(this.Action) != len(that1.Action) {
		return fmt.Errorf("Action this(%v) Not Equal that(%v)", len(this.Action), len(that1.Action))
	}
	for i := range this.Action {
		if !this.Action[i].Equal(that1.Action[i]) {
			return fmt.Errorf("Action this[%v](%v) Not Equal that[%v](%v)", i, this.Action[i], i, that1.Action[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ATCPChecker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ATCPChecker)
	if !ok {
		that2, ok := that.(ATCPChecker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Action) != len(that1.Action) {
		return false
	}
	for i := range this.Action {
		if !this.Action[i].Equal(that1.Action[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ATCPChecker_Action) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ATCPChecker_Action)
	if !ok {
		that2, ok := that.(ATCPChecker_Action)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ATCPChecker_Action")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ATCPChecker_Action but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ATCPChecker_Action but is not nil && this == nil")
	}
	if !bytes.Equal(this.Send, that1.Send) {
		return fmt.Errorf("Send this(%v) Not Equal that(%v)", this.Send, that1.Send)
	}
	if !bytes.Equal(this.Expect, that1.Expect) {
		return fmt.Errorf("Expect this(%v) Not Equal that(%v)", this.Expect, that1.Expect)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ATCPChecker_Action) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ATCPChecker_Action)
	if !ok {
		that2, ok := that.(ATCPChecker_Action)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Send, that1.Send) {
		return false
	}
	if !bytes.Equal(this.Expect, that1.Expect) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MySQLChecker) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MySQLChecker)
	if !ok {
		that2, ok := that.(MySQLChecker)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MySQLChecker")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MySQLChecker but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MySQLChecker but is not nil && this == nil")
	}
	if this.Username != that1.Username {
		return fmt.Errorf("Username this(%v) Not Equal that(%v)", this.Username, that1.Username)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *MySQLChecker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MySQLChecker)
	if !ok {
		that2, ok := that.(MySQLChecker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RedisChecker) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RedisChecker)
	if !ok {
		that2, ok := that.(RedisChecker)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RedisChecker")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RedisChecker but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RedisChecker but is not nil && this == nil")
	}
	if this.Password != that1.Password {
		return fmt.Errorf("Password this(%v) Not Equal that(%v)", this.Password, that1.Password)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RedisChecker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RedisChecker)
	if !ok {
		that2, ok := that.(RedisChecker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheck) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HealthCheck)
	if !ok {
		that2, ok := that.(HealthCheck)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HealthCheck")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HealthCheck but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HealthCheck but is not nil && this == nil")
	}
	if this.Interval != that1.Interval {
		return fmt.Errorf("Interval this(%v) Not Equal that(%v)", this.Interval, that1.Interval)
	}
	if this.Timeout != that1.Timeout {
		return fmt.Errorf("Timeout this(%v) Not Equal that(%v)", this.Timeout, that1.Timeout)
	}
	if this.FallThreshold != that1.FallThreshold {
		return fmt.Errorf("FallThreshold this(%v) Not Equal that(%v)", this.FallThreshold, that1.FallThreshold)
	}
	if this.RiseThreshold != that1.RiseThreshold {
		return fmt.Errorf("RiseThreshold this(%v) Not Equal that(%v)", this.RiseThreshold, that1.RiseThreshold)
	}
	if that1.Checker == nil {
		if this.Checker != nil {
			return fmt.Errorf("this.Checker != nil && that1.Checker == nil")
		}
	} else if this.Checker == nil {
		return fmt.Errorf("this.Checker == nil && that1.Checker != nil")
	} else if err := this.Checker.VerboseEqual(that1.Checker); err != nil {
		return err
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *HealthCheck_TcpChecker) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HealthCheck_TcpChecker)
	if !ok {
		that2, ok := that.(HealthCheck_TcpChecker)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HealthCheck_TcpChecker")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HealthCheck_TcpChecker but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HealthCheck_TcpChecker but is not nil && this == nil")
	}
	if !this.TcpChecker.Equal(that1.TcpChecker) {
		return fmt.Errorf("TcpChecker this(%v) Not Equal that(%v)", this.TcpChecker, that1.TcpChecker)
	}
	return nil
}
func (this *HealthCheck_AtcpChecker) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HealthCheck_AtcpChecker)
	if !ok {
		that2, ok := that.(HealthCheck_AtcpChecker)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HealthCheck_AtcpChecker")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HealthCheck_AtcpChecker but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HealthCheck_AtcpChecker but is not nil && this == nil")
	}
	if !this.AtcpChecker.Equal(that1.AtcpChecker) {
		return fmt.Errorf("AtcpChecker this(%v) Not Equal that(%v)", this.AtcpChecker, that1.AtcpChecker)
	}
	return nil
}
func (this *HealthCheck_MysqlChecker) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HealthCheck_MysqlChecker)
	if !ok {
		that2, ok := that.(HealthCheck_MysqlChecker)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HealthCheck_MysqlChecker")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HealthCheck_MysqlChecker but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HealthCheck_MysqlChecker but is not nil && this == nil")
	}
	if !this.MysqlChecker.Equal(that1.MysqlChecker) {
		return fmt.Errorf("MysqlChecker this(%v) Not Equal that(%v)", this.MysqlChecker, that1.MysqlChecker)
	}
	return nil
}
func (this *HealthCheck_RedisChecker) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HealthCheck_RedisChecker)
	if !ok {
		that2, ok := that.(HealthCheck_RedisChecker)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HealthCheck_RedisChecker")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HealthCheck_RedisChecker but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HealthCheck_RedisChecker but is not nil && this == nil")
	}
	if !this.RedisChecker.Equal(that1.RedisChecker) {
		return fmt.Errorf("RedisChecker this(%v) Not Equal that(%v)", this.RedisChecker, that1.RedisChecker)
	}
	return nil
}
func (this *HealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheck)
	if !ok {
		that2, ok := that.(HealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.FallThreshold != that1.FallThreshold {
		return false
	}
	if this.RiseThreshold != that1.RiseThreshold {
		return false
	}
	if that1.Checker == nil {
		if this.Checker != nil {
			return false
		}
	} else if this.Checker == nil {
		return false
	} else if !this.Checker.Equal(that1.Checker) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheck_TcpChecker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheck_TcpChecker)
	if !ok {
		that2, ok := that.(HealthCheck_TcpChecker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpChecker.Equal(that1.TcpChecker) {
		return false
	}
	return true
}
func (this *HealthCheck_AtcpChecker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheck_AtcpChecker)
	if !ok {
		that2, ok := that.(HealthCheck_AtcpChecker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AtcpChecker.Equal(that1.AtcpChecker) {
		return false
	}
	return true
}
func (this *HealthCheck_MysqlChecker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheck_MysqlChecker)
	if !ok {
		that2, ok := that.(HealthCheck_MysqlChecker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MysqlChecker.Equal(that1.MysqlChecker) {
		return false
	}
	return true
}
func (this *HealthCheck_RedisChecker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheck_RedisChecker)
	if !ok {
		that2, ok := that.(HealthCheck_RedisChecker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RedisChecker.Equal(that1.RedisChecker) {
		return false
	}
	return true
}
func (this *TCPChecker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&hc.TCPChecker{")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ATCPChecker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&hc.ATCPChecker{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ATCPChecker_Action) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&hc.ATCPChecker_Action{")
	s = append(s, "Send: "+fmt.Sprintf("%#v", this.Send)+",\n")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MySQLChecker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&hc.MySQLChecker{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RedisChecker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&hc.RedisChecker{")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&hc.HealthCheck{")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "FallThreshold: "+fmt.Sprintf("%#v", this.FallThreshold)+",\n")
	s = append(s, "RiseThreshold: "+fmt.Sprintf("%#v", this.RiseThreshold)+",\n")
	if this.Checker != nil {
		s = append(s, "Checker: "+fmt.Sprintf("%#v", this.Checker)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthCheck_TcpChecker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&hc.HealthCheck_TcpChecker{` +
		`TcpChecker:` + fmt.Sprintf("%#v", this.TcpChecker) + `}`}, ", ")
	return s
}
func (this *HealthCheck_AtcpChecker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&hc.HealthCheck_AtcpChecker{` +
		`AtcpChecker:` + fmt.Sprintf("%#v", this.AtcpChecker) + `}`}, ", ")
	return s
}
func (this *HealthCheck_MysqlChecker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&hc.HealthCheck_MysqlChecker{` +
		`MysqlChecker:` + fmt.Sprintf("%#v", this.MysqlChecker) + `}`}, ", ")
	return s
}
func (this *HealthCheck_RedisChecker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&hc.HealthCheck_RedisChecker{` +
		`RedisChecker:` + fmt.Sprintf("%#v", this.RedisChecker) + `}`}, ", ")
	return s
}
func valueToGoStringHc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TCPChecker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPChecker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPChecker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ATCPChecker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ATCPChecker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ATCPChecker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Action) > 0 {
		for iNdEx := len(m.Action) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Action[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ATCPChecker_Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ATCPChecker_Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ATCPChecker_Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Expect) > 0 {
		i -= len(m.Expect)
		copy(dAtA[i:], m.Expect)
		i = encodeVarintHc(dAtA, i, uint64(len(m.Expect)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Send) > 0 {
		i -= len(m.Send)
		copy(dAtA[i:], m.Send)
		i = encodeVarintHc(dAtA, i, uint64(len(m.Send)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MySQLChecker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLChecker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLChecker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintHc(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedisChecker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisChecker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisChecker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintHc(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Checker != nil {
		{
			size := m.Checker.Size()
			i -= size
			if _, err := m.Checker.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RiseThreshold != 0 {
		i = encodeVarintHc(dAtA, i, uint64(m.RiseThreshold))
		i--
		dAtA[i] = 0x20
	}
	if m.FallThreshold != 0 {
		i = encodeVarintHc(dAtA, i, uint64(m.FallThreshold))
		i--
		dAtA[i] = 0x18
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Timeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Timeout):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintHc(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Interval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintHc(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HealthCheck_TcpChecker) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *HealthCheck_TcpChecker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpChecker != nil {
		{
			size, err := m.TcpChecker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *HealthCheck_AtcpChecker) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *HealthCheck_AtcpChecker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AtcpChecker != nil {
		{
			size, err := m.AtcpChecker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *HealthCheck_MysqlChecker) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *HealthCheck_MysqlChecker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MysqlChecker != nil {
		{
			size, err := m.MysqlChecker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *HealthCheck_RedisChecker) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *HealthCheck_RedisChecker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RedisChecker != nil {
		{
			size, err := m.RedisChecker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func encodeVarintHc(dAtA []byte, offset int, v uint64) int {
	offset -= sovHc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TCPChecker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ATCPChecker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Action) > 0 {
		for _, e := range m.Action {
			l = e.Size()
			n += 1 + l + sovHc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ATCPChecker_Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Send)
	if l > 0 {
		n += 1 + l + sovHc(uint64(l))
	}
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovHc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MySQLChecker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovHc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedisChecker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovHc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval)
	n += 1 + l + sovHc(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Timeout)
	n += 1 + l + sovHc(uint64(l))
	if m.FallThreshold != 0 {
		n += 1 + sovHc(uint64(m.FallThreshold))
	}
	if m.RiseThreshold != 0 {
		n += 1 + sovHc(uint64(m.RiseThreshold))
	}
	if m.Checker != nil {
		n += m.Checker.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HealthCheck_TcpChecker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpChecker != nil {
		l = m.TcpChecker.Size()
		n += 1 + l + sovHc(uint64(l))
	}
	return n
}
func (m *HealthCheck_AtcpChecker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AtcpChecker != nil {
		l = m.AtcpChecker.Size()
		n += 1 + l + sovHc(uint64(l))
	}
	return n
}
func (m *HealthCheck_MysqlChecker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MysqlChecker != nil {
		l = m.MysqlChecker.Size()
		n += 1 + l + sovHc(uint64(l))
	}
	return n
}
func (m *HealthCheck_RedisChecker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RedisChecker != nil {
		l = m.RedisChecker.Size()
		n += 1 + l + sovHc(uint64(l))
	}
	return n
}

func sovHc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHc(x uint64) (n int) {
	return sovHc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TCPChecker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPChecker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPChecker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ATCPChecker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ATCPChecker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ATCPChecker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action, &ATCPChecker_Action{})
			if err := m.Action[len(m.Action)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ATCPChecker_Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Send = append(m.Send[:0], dAtA[iNdEx:postIndex]...)
			if m.Send == nil {
				m.Send = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = append(m.Expect[:0], dAtA[iNdEx:postIndex]...)
			if m.Expect == nil {
				m.Expect = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLChecker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLChecker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLChecker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisChecker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisChecker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisChecker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Interval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Timeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallThreshold", wireType)
			}
			m.FallThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FallThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiseThreshold", wireType)
			}
			m.RiseThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RiseThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpChecker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TCPChecker{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Checker = &HealthCheck_TcpChecker{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtcpChecker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ATCPChecker{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Checker = &HealthCheck_AtcpChecker{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MysqlChecker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MySQLChecker{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Checker = &HealthCheck_MysqlChecker{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedisChecker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RedisChecker{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Checker = &HealthCheck_RedisChecker{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthHc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthHc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHc   = fmt.Errorf("proto: integer overflow")
)
