// Code generated by protoc-gen-jsonify. DO NOT EDIT.
// source: config/hc/hc.proto

package hc
import (
	"bytes"
	"encoding/json"
	"github.com/gogo/protobuf/jsonpb"
)

// TCPCheckerJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of TCPChecker. This struct is safe to replace or modify but
// should not be done so concurrently.
var TCPCheckerJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *TCPChecker) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := TCPCheckerJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*TCPChecker)(nil)
// TCPCheckerJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of TCPChecker. This struct is safe to replace or modify but
// should not be done so concurrently.
var TCPCheckerJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *TCPChecker) UnmarshalJSON(b []byte) error {
	return TCPCheckerJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*TCPChecker)(nil)

// ATCPCheckerJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of ATCPChecker. This struct is safe to replace or modify but
// should not be done so concurrently.
var ATCPCheckerJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *ATCPChecker) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := ATCPCheckerJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*ATCPChecker)(nil)
// ATCPCheckerJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of ATCPChecker. This struct is safe to replace or modify but
// should not be done so concurrently.
var ATCPCheckerJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *ATCPChecker) UnmarshalJSON(b []byte) error {
	return ATCPCheckerJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*ATCPChecker)(nil)

// MySQLCheckerJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of MySQLChecker. This struct is safe to replace or modify but
// should not be done so concurrently.
var MySQLCheckerJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *MySQLChecker) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := MySQLCheckerJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*MySQLChecker)(nil)
// MySQLCheckerJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of MySQLChecker. This struct is safe to replace or modify but
// should not be done so concurrently.
var MySQLCheckerJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *MySQLChecker) UnmarshalJSON(b []byte) error {
	return MySQLCheckerJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*MySQLChecker)(nil)

// RedisCheckerJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of RedisChecker. This struct is safe to replace or modify but
// should not be done so concurrently.
var RedisCheckerJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *RedisChecker) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := RedisCheckerJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*RedisChecker)(nil)
// RedisCheckerJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of RedisChecker. This struct is safe to replace or modify but
// should not be done so concurrently.
var RedisCheckerJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *RedisChecker) UnmarshalJSON(b []byte) error {
	return RedisCheckerJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*RedisChecker)(nil)

// HealthCheckJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of HealthCheck. This struct is safe to replace or modify but
// should not be done so concurrently.
var HealthCheckJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *HealthCheck) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := HealthCheckJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*HealthCheck)(nil)
// HealthCheckJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of HealthCheck. This struct is safe to replace or modify but
// should not be done so concurrently.
var HealthCheckJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *HealthCheck) UnmarshalJSON(b []byte) error {
	return HealthCheckJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*HealthCheck)(nil)

// ATCPChecker_ActionJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of ATCPChecker_Action. This struct is safe to replace or modify but
// should not be done so concurrently.
var ATCPChecker_ActionJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *ATCPChecker_Action) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := ATCPChecker_ActionJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*ATCPChecker_Action)(nil)
// ATCPChecker_ActionJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of ATCPChecker_Action. This struct is safe to replace or modify but
// should not be done so concurrently.
var ATCPChecker_ActionJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *ATCPChecker_Action) UnmarshalJSON(b []byte) error {
	return ATCPChecker_ActionJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*ATCPChecker_Action)(nil)

