// Code generated by protoc-gen-jsonify. DO NOT EDIT.
// source: config/service/config.proto

package service
import (
	"bytes"
	"encoding/json"
	"github.com/gogo/protobuf/jsonpb"
)

// ListenerJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of Listener. This struct is safe to replace or modify but
// should not be done so concurrently.
var ListenerJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *Listener) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := ListenerJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*Listener)(nil)
// ListenerJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of Listener. This struct is safe to replace or modify but
// should not be done so concurrently.
var ListenerJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *Listener) UnmarshalJSON(b []byte) error {
	return ListenerJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*Listener)(nil)

// ConfigJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of Config. This struct is safe to replace or modify but
// should not be done so concurrently.
var ConfigJSONMarshaler = new(jsonpb.Marshaler)
// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *Config) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}
	buf := &bytes.Buffer{}
	if err := ConfigJSONMarshaler.Marshal(buf, m); err != nil {
	  return nil, err
	}
	return buf.Bytes(), nil
}
var _ json.Marshaler = (*Config)(nil)
// ConfigJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of Config. This struct is safe to replace or modify but
// should not be done so concurrently.
var ConfigJSONUnmarshaler = new(jsonpb.Unmarshaler)
// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *Config) UnmarshalJSON(b []byte) error {
	return ConfigJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}
var _ json.Unmarshaler = (*Config)(nil)

